from rest_framework_simplejwt.views import TokenObtainPairView
from django.conf import settings
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.response import Response
from rest_framework import status
from rest_framework.views import APIView
from rest_framework.permissions import IsAuthenticated
from rest_framework.generics import RetrieveAPIView
from django.http import JsonResponse
from django.views.decorators.csrf import ensure_csrf_cookie

# Custom serializer
from .serializers import UserSerializer

@ensure_csrf_cookie
def get_csrf_token(request):
    return JsonResponse({'detail': 'CSRF cookie set'})

class PublicInfoView(APIView):
    """
    Example of a public view that does not require authentication.
    Accessible to all users.
    """
    def get(self, request):
        # Return public information
        return Response({"message": "Welcome to our public API!", "status": "success"})


class CustomTokenObtainPairView(TokenObtainPairView):
    """
    Personalized view for login.
    It generates tokens and places them in HttpOnly cookies.
    """
    def post(self, request):
        serializer = self.get_serializer(data=request.data)

        if not serializer.is_valid():
            # Handle validation errors (e.g., invalid credentials)
            return Response(
                {"detail": "Invalid credentials provided."},
                status=status.HTTP_401_UNAUTHORIZED
            )

        # Tokens are generated by the Simple JWT serializer
        access_token = serializer.validated_data["access"]
        refresh_token = serializer.validated_data["refresh"]

        # Retrieve the authenticated user to send their information to the frontend
        user = serializer.user
        user_data = UserSerializer(user).data

        response = Response({'user': user_data}, status=status.HTTP_200_OK)

        # Define the cookie for the Access Token
        response.set_cookie(
            key=settings.SIMPLE_JWT['AUTH_COOKIE'],
            value=access_token,
            expires=settings.SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'],
            secure=settings.SIMPLE_JWT['AUTH_COOKIE_SECURE'],
            httponly=settings.SIMPLE_JWT['AUTH_COOKIE_HTTP_ONLY'],
            samesite=settings.SIMPLE_JWT['AUTH_COOKIE_SAMESITE']
        )

        # Define the cookie for the Refresh Token
        response.set_cookie(
            key=settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH'],
            value=refresh_token,
            expires=settings.SIMPLE_JWT['REFRESH_TOKEN_LIFETIME'],
            secure=settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH_SECURE'],
            httponly=settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH_HTTP_ONLY'],
            samesite=settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH_SAMESITE']
        )

        return response

class LogoutView(APIView):
    """
    View for logout.
    It invalidates the refresh token and removes authentication cookies.
    """
    def post(self, request):
        try:
            # Get the refresh token from the cookie (if present)
            refresh_token = request.COOKIES.get(settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH'])
            if refresh_token:
                token = RefreshToken(refresh_token)
                token.blacklist()  # Invalidate the refresh token by adding it to the blacklist

            response = Response(status=status.HTTP_204_NO_CONTENT)  # 204 No Content for a successful deletion

            # Remove the cookies by setting them to expire or be empty
            response.set_cookie(
                key=settings.SIMPLE_JWT['AUTH_COOKIE'],
                value='',
                expires=0,  # Expire immediately
                secure=settings.SIMPLE_JWT['AUTH_COOKIE_SECURE'],
                httponly=settings.SIMPLE_JWT['AUTH_COOKIE_HTTP_ONLY'],
                samesite=settings.SIMPLE_JWT['AUTH_COOKIE_SAMESITE']
            )
            response.set_cookie(
                key=settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH'],
                value='',
                expires=0,  # Expire immediately
                secure=settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH_SECURE'],
                httponly=settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH_HTTP_ONLY'],
                samesite=settings.SIMPLE_JWT['AUTH_COOKIE_REFRESH_SAMESITE']
            )
            return response
        except Exception as e:
            # Handle cases where the token is already invalid or missing
            print(f"Error during logout: {e}")
            return Response(
                {"detail": "Could not process logout request."},
                status=status.HTTP_400_BAD_REQUEST
            )

class UserMeView(RetrieveAPIView):
    """
    View to retrieve information about the currently authenticated user.
    Requires a valid Access Token.
    """
    permission_classes = (IsAuthenticated,)  # Protected, requires a valid JWT
    serializer_class = UserSerializer

    def get_object(self):
        # request.user is automatically set by JWTAuthentication if the token is valid
        return self.request.user

class ProtectedDataView(APIView):
    """
    Example of a protected view that requires a valid JWT.
    """
    permission_classes = (IsAuthenticated,)  # Protected, requires a valid JWT

    def get(self, request):
        # The user object is accessible via request.user
        return Response({"message": f"Bonjour, {request.user.username}! Ceci est une donnée protégée."})
